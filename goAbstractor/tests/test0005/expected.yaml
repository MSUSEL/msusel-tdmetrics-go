{
  interfaces: [
    {}, # any
    { # pointer[T]
      inherits: [ 0 ],
      typeParams: [
        { name: "T", type: 0 }
      ],
      methods: {
        $deref: {
          target: 4,
          typeParams: [ "T" ]
        }
      }
    },
    { # interface { Play(c *Cat) }
      inherits: [ 0 ],
      methods: {
        Play: 5
      }
    },
    { # list[T]
      inherits: [ 0 ],
      typeParams: [
        { name: "T", type: 0 }
      ],
      methods: {
        $cap: 6,
        $get: {
          target: 7,
          typeParams: [ "T" ]
        },
        $len: 6,
        $set: {
          target: 8,
          typeParams: [ "T" ]
        }
      }
    }
  ],
  language: "go",
  packages: [
    {
      methods: [
        {
          name: "NewCat", signature: 10,
          metrics: { codeCount: 6, complexity: 1, indents: 6, lineCount: 6 }
        },
        {
          name: "NextYear", signature: 13,
          metrics: { codeCount: 5, complexity: 2, indents: 4, lineCount: 5 }
        },
        {
          name: "Pet", signature: 5,
          metrics: { codeCount: 3, complexity: 1, indents: 1, lineCount: 3 }
        }
      ],
      path: "command-line-arguments",
      types: [
        {
          inherits: [ 0 ],
          methods: [
            {
              name: "Meow", signature: 11,
              metrics: { codeCount: 3, complexity: 1, indents: 1, lineCount: 3 }
            },
            {
              name: "String", signature: 12,
              metrics: { codeCount: 3, complexity: 1, indents: 1, lineCount: 3 }
            }
          ],
          name: "Cat", type: 15
        },
        { name: "Toy", type: 2 },
        {
          inherits: [ 0 ],
          methods: [
            {
              name: "Youngest", signature: 14,
              metrics: { codeCount: 9, complexity: 4, indents: 11, lineCount: 9 }
            }
          ],
          name: "Cats",
          type: { # []*Cat
            kind: "solid",
            target: 3,
            typeParams: [
              { # *Cat
                target: 1,
                typeParams: [
                  "command-line-arguments.Cat"
                ]
              }
            ]
          }
        }
      ],
      values: [
        { name: "log", type: 9 }
      ]
    }
  ],
  signatures: [
    { # func[T any]() T
      return: "T",
      typeParams: [
        { name: "T", type: 0 }
      ]
    },
    { # func(c *Cat)
      params: [
        {
          name: "c",
          type: {
            kind: "solid",
            target: 1,
            typeParams: [
              "command-line-arguments.Cat"
            ]
          }
        }
      ]
    },
    { # func() int
      return: "int"
    },
    { # func[T any](index int) T
      typeParams: [
        { name: "T", type: 0 }
      ],
      params: [
        { name: "index", type: "int" }
      ],
      return: "T"
    },
    { # func[T any](index int, value T)
      typeParams: [
        { name: "T", type: 0 }
      ],
      params: [
        { name: "index", type: "int" },
        { name: "value", type: "T" }
      ]
    },
    { # func(value string)
      params: [
        { name: "value", type: "string" }
      ]
    },
    { # func(name string, age int) *Cat
      params: [
        { name: "name", type: "string" },
        { name: "age",  type: "int" }
      ],
      return: {
        kind: "solid",
        target: 1,
        typeParams: [
          "command-line-arguments.Cat"
        ]
      }
    },
    {}, # func()()
    { return: "string" }, # func() string
    { # func(cats ...*Cat)
      params: [
        {
          name: "cats",
          type: { # list[pointer[Cat]]
            kind: "solid",
            target: 3,
            typeParams: [
              { # pointer[Cat]
                target: 1,
                typeParams: [
                  "command-line-arguments.Cat"
                ]
              }
            ]
          }
        }
      ],
      variadic: true
    },
    { # func() *Cat
      return: {
        kind: "solid",
        target: 1,
        typeParams: [
          "command-line-arguments.Cat"
        ]
      }
    }
  ],
  structs: [
    { # struct { Name string; Age int }
      fields: [
        { name: "Name", type: "string" },
        { name: "Age",  type: "int" }
      ]
    }
  ]
}
