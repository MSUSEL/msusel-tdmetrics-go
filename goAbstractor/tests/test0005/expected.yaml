{
  interfaces: [
    {}, # any
    { # pointer[T]
      inherits: [ 0 ],
      typeParams: [
        { name: T, type: 0 }
      ],
      methods: {
        $deref: {
          target: 6,
          typeParams: [ T ]
        }
      }
    },
    { # interface { Play(c *Cat) }
      inherits: [ 0 ],
      methods: {
        Play: 7
      }
    },
    { # list[T]
      inherits: [ 0 ],
      typeParams: [
        { name: T, type: 0 }
      ],
      methods: {
        $cap: 8,
        $get: {
          target: 9,
          typeParams: [ T ]
        },
        $len: 8,
        $set: {
          target: 10,
          typeParams: [ T ]
        }
      }
    },
    { # interface { Meow(); String() string }
      inherits: [ 0 ],
      methods: {
        Meow: 13,
        String: 14
      }
    },
    { # interface { Youngest() *Cat }
      inherits: [ 0 ],
      methods: {
        Youngest: 16
      }
    }
  ],
  language: go,
  packages: [
    {
      methods: [
        {
          name: NewCat, signature: 12,
          metrics: { codeCount: 6, complexity: 1, indents: 6, lineCount: 6 }
        },
        {
          name: NextYear, signature: 15,
          metrics: { codeCount: 5, complexity: 2, indents: 4, lineCount: 5 }
        },
        {
          name: Pet, signature: 7,
          metrics: { codeCount: 3, complexity: 1, indents: 1, lineCount: 3 }
        }
      ],
      path: command-line-arguments,
      types: [
        {
          name: Cat, type: 17,
          interface: 4,
          methods: [
            {
              name: Meow, signature: 13,
              metrics: { codeCount: 3, complexity: 1, indents: 1, lineCount: 3 }
            },
            {
              name: String, signature: 14,
              metrics: { codeCount: 3, complexity: 1, indents: 1, lineCount: 3 }
            }
          ]
        },
        { name: Toy, type: 2 },
        {
          name: Cats,
          interface: 5,
          methods: [
            {
              name: Youngest, signature: 16,
              metrics: { codeCount: 9, complexity: 4, indents: 11, lineCount: 9 }
            }
          ],
          type: { # []*Cat
            kind: solid,
            target: 3, # slice
            typeParams: [
              { # *Cat
                kind: solid,
                target: 1, # pointer
                typeParams: [
                  "command-line-arguments.Cat"
                ]
              }
            ]
          }
        }
      ],
      values: [
        { name: log, type: 11 }
      ]
    }
  ],
  signatures: [
    { # func[T any]() T
      return: T,
      typeParams: [
        { name: T, type: 0 }
      ]
    },
    { # func(c *Cat)
      params: [
        {
          name: c,
          type: {
            kind: solid,
            target: 1,
            typeParams: [
              "command-line-arguments.Cat"
            ]
          }
        }
      ]
    },
    { # func() int
      return: int
    },
    { # func[T any](index int) T
      typeParams: [
        { name: T, type: 0 }
      ],
      params: [
        { name: index, type: int }
      ],
      return: T
    },
    { # func[T any](index int, value T)
      typeParams: [
        { name: T, type: 0 }
      ],
      params: [
        { name: index, type: int },
        { name: value, type: T }
      ]
    },
    { # func(value string)
      params: [
        { name: value, type: string }
      ]
    },
    { # func(name string, age int) *Cat
      params: [
        { name: name, type: string },
        { name: age,  type: int }
      ],
      return: {
        kind: solid,
        target: 1,
        typeParams: [
          "command-line-arguments.Cat"
        ]
      }
    },
    {}, # func()
    { return: string }, # func() string
    { # func(cats ...*Cat)
      params: [
        {
          name: cats,
          type: { # list[pointer[Cat]]
            kind: solid,
            target: 3,
            typeParams: [
              { # pointer[Cat]
                kind: solid,
                target: 1,
                typeParams: [
                  "command-line-arguments.Cat"
                ]
              }
            ]
          }
        }
      ],
      variadic: true
    },
    { # func() *Cat
      return: {
        kind: solid,
        target: 1,
        typeParams: [
          "command-line-arguments.Cat"
        ]
      }
    }
  ],
  structs: [
    { # struct { Name string; Age int }
      fields: [
        { name: Name, type: string },
        { name: Age,  type: int }
      ]
    }
  ]
}
