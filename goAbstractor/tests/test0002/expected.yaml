{
  language: "go",
  interfaces: [
    {}, # any
    {  # list[T]
      inherits: [ 0 ],
      typeParams: [
        { name: "T", type: 0 }
      ],
      methods: {
        $cap: 2,
        $get: { target: 3, typeParams: [ "T" ] },
        $len: 2,
        $set: { target: 4, typeParams: [ "T" ] }
      }
    }
  ],
  packages: [
    {
      path: "command-line-arguments",
      methods: [
        { # func sum(values ...int) int
          name: "sum", signature: 5,
          metrics: { codeCount: 7, complexity: 2, indents: 6, lineCount: 7 }
        },
        { # func first(values ...int) int
          name: "first", signature: 5,
          metrics: { codeCount: 3, complexity: 1, indents: 1, lineCount: 3 }
        },
        { # func last(values ...int) int
          name: "last", signature: 5,
          metrics: { codeCount: 3, complexity: 1, indents: 1, lineCount: 3 }
        },
        { # func main()
          name: "main", signature: 6,
          metrics: { codeCount: 6, complexity: 1, indents: 4, lineCount: 6 }
        }
      ]
    }
  ],
  signatures: [
    { # func() int
      return: "int"
    },
    { # func[T](index int) T
      typeParams: [
        { name: "T", type: 0 }
      ],
      params: [
        { name: "index", type: "int" }
      ],
      return: "T"
    },
    { # func[T](index int, value T)
      typeParams: [
        { name: "T", type: 0 }
      ],
      params: [
        { name: "index",type: "int" },
        { name: "value", type: "T" }
      ]
    },
    { # func(values ...int) int
      params: [
        {
          name: "values",
          type: {
            kind: "solid",
            target: 1,
            typeParams: [ "int" ]
          }
        }
      ],
      variadic: true,
      return: "int"
    },
    {} # func()()
  ]
}
