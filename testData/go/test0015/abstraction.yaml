{
  language: go,
  abstracts: [
    { name: $equal, signature: 9, exported: true }, # 1. $equal(other any) bool
    { name: $get,   signature: 3, exported: true }, # 2. $get(index int)(value int)
    { name: $get,   signature: 4, exported: true }, # 3. $get(index int)(value T <any>)
    { name: $get,   signature: 5, exported: true }, # 4. $get(index int)(value T <comparable>)
    { name: $len,   signature: 2, exported: true }, # 5. $len() int
    { name: $set,   signature: 6, exported: true }, # 6. $set(index int, value int)
    { name: $set,   signature: 7, exported: true }, # 7. $set(index int, value T <any>)
    { name: $set,   signature: 8, exported: true }  # 8. $set(index int, value T <comparable>)
  ],
  arguments: [
    {              type: basic1         }, #  1. <unnamed> bool
    {              type: basic2         }, #  2. <unnamed> int
    {              type: interfaceInst1 }, #  3. <unnamed> List[int]
    {              type: interfaceInst2 }, #  4. <unnamed> List[T <comparable>]
    { name: index, type: basic2         }, #  5. index int
    { name: other, type: interfaceDesc1 }, #  6. other any
    { name: t,     type: interfaceInst1 }, #  7. t List[int]
    { name: t,     type: interfaceInst2 }, #  8. t List[T <comparable>]
    { name: value, type: basic2         }, #  9. value T <any>
    { name: value, type: typeParam1     }, # 10. value T <any>
    { name: value, type: typeParam2     }  # 11. value T <comparable>
  ],
  basics: [ bool, int ],
  interfaceDecls: [
    { # 1. $builtin.List[T any]{ $len; $get; $set }
      name: List, package: 1, interface: 4, exported: true,
      typeParams: [ 1 ], instances: [ 1, 2 ],
    },
    { # 2. $builtin.comparable{ $equal }
      name: comparable, package: 1, interface: 2, exported: true
    }
  ],
  interfaceDescs: [
    { }, # 1. any
    {    # 2. [comparable] interface{ $equal }
      abstracts: [ 1 ], hint: comparable,
      inherits: [ 1 ]
    },
    { # 3. [list] interface[int]{ $len; $get; $set }
      abstracts: [ 5, 2, 6 ], hint: list,
      inherits: [ 1 ]
    },
    { # 4. [list] interface[T <any>]{ $len; $get; $set }
      abstracts: [ 5, 3, 7 ], hint: list,
      inherits: [ 1 ]
    },
    { # 5. [list] interface[T <comparable>]{ $len; $get; $set }
      abstracts: [ 5, 4, 8 ], hint: list,
      inherits: [ 1 ]
    }
  ],
  interfaceInsts: [
    { # 1. List[int]
      generic: 1, instanceTypes: [ basic2 ], resolved: 3
    },
    { # 2. List[T <comparable>]
      generic: 1, instanceTypes: [ typeParam2 ], resolved: 5
    }
  ],
  methodInsts: [
    { # 1. main.AsSlice[int](t List[int]) List[int]
      generic: 1, instanceTypes: [ basic2 ], resolved: 10
    }
  ],
  methods: [
    { # 1. main.AsSlice[T components](t List[T <any>]) List[T <any>]
      name: AsSlice, package: 2, signature: 11, typeParams: [ 2 ],
      exported: true, loc: 8, metrics: 1, instances: [ 1 ]
    },
    { # 2. main.main()
      name: main, package: 2, signature: 1,
      loc: 12, metrics: 2
    }
  ],
  metrics: [
    { # 1. metrics for `AsSlice`
      codeCount: 3, complexity: 1, indents: 1, lineCount: 3, loc: 8,
      reads: [ interfaceDecl2 ]
    },
    { # 2. metrics for `main`
      codeCount: 3, complexity: 1, indents: 1, lineCount: 3, loc: 12,
      sideEffect: true,
      invokes: [ methodInst1 ]
    }
  ],
  packages: [
    { # 1. $builtin package
      name: $builtin, path: $builtin,
      interfaces: [ 1, 2 ]
    },
    { # 2. main package
      name: main, path: command-line-arguments,
      methods: [ 1, 2 ],
    }
  ],
  signatures: [
    {},                                 # 1. func()
    { results: [ 2 ] },                 # 2. func() int
    { params: [ 5 ], results: [  9 ] }, # 3. func(index int)(value int)
    { params: [ 5 ], results: [ 10 ] }, # 4. func(index int)(value T <any>)
    { params: [ 5 ], results: [ 11 ] }, # 5. func(index int)(value T <comparable>)
    { params: [ 5,  9 ] },              # 6. func(index int, value int)
    { params: [ 5, 10 ] },              # 7. func(index int, value T <any>)
    { params: [ 5, 11 ] },              # 8. func(index int, value T <comparable>)
    { params: [ 6 ], results: [ 1 ] },  # 9. func(other any) bool
    {
      params: [ 7 ], results: [ 3 ],    # 8. func(t List[T <any>]) List[T <any>]
      variadic: true
    },
    {
      params: [ 8 ], results: [ 4 ],    # 9. func(t List[T <comparable>]) List[T <comparable>]
      variadic: true
    }
  ],
  typeParams: [
    { name: T, type: interfaceDesc1 }, # 1. T any
    { name: T, type: interfaceDesc2 }  # 2. T comparable
  ],
  locs: {
    '1': main.go
  }
}
