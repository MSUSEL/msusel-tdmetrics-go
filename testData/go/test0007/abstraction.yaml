{
  language: go,
  abstracts: [
    { name: $deref, signature: 30 }, # 1. func $deref() Foo[T<string|int>]
    { name: $deref, signature: 31 }  # 2. func $deref() T<any>
  ],
  arguments: [
    { type: 14 }, # 3. <unnamed> Pointer[Foo[T<string|int>]]
    { type: 15 }, # 4. <unnamed> Foo[T<string|int>]
    { type: 36 }, # 5. <unnamed> T<any>
    { type: 38 }, # 6. <unnamed> T<string|int|uint>
    { name: v, type: 37 }, # 7. v T<string|int>
    { name: v, type: 38 }  # 8. v T<string|int|uint>
  ],
  basics: [
    int,   #  9. int
    uint,  # 10. uint
    string, # 11. string
    bool
  ],
  fields: [
    { name: value, type: 37 }, # 12. value T<string|int>
    { name: value, type: 38 }  # 13. value T<string|int|uint>
  ],
  instances: [
    { # 14. Pointer[Foo[T<string|int>]]
      generic: 16,
      instanceTypes: [ 15 ],
      resolved: 21
    },
    { # 15. main.Foo[T string|int]
      generic: 26,
      instanceTypes: [ 37 ],
      resolved: 34
    } # TODO: Need to add instance of Foo[string]
  ],
  interfaceDecls: [
    { # 16. $builtin.Pointer[T any]
      name: Pointer, package: 27, interface: 22,
      typeParams: [ 36 ],
      instances: [ 14 ]
    },
    { # 17. $builtin.any interface{}
      name: any, package: 27, interface: 18
    }
  ],
  interfaceDescs: [
    {},                       # 18. interface {}
    { exact: [ 11, 9 ] },     # 19. interface { string | int }
    { exact: [ 11, 9, 10 ] }, # 20. interface { string | int | uint }
    { abstracts: [ 1 ] },     # 21. interface { $deref() Foo[T<string|int>] }
    { abstracts: [ 2 ] }      # 22. interface { $deref() T<any> }
  ],
  methods: [
    { # 23. func (*Foo) Add(v T) T where T string|int|uint @ main.go:9
      name: Add, package: 28, receiver: 26, signature: 33, loc: 9,
      metrics: { codeCount: 4, complexity: 1, indents: 2, lineCount: 4 }
    },
    { # 24. func New[T string|int](v T) $builtin.Pointer[main.Foo[T]] @ main.go:14
      name: New, package: 28, signature: 32, loc: 14,
      typeParams: [ 37 ],
      metrics: { codeCount: 3, complexity: 1, indents: 1, lineCount: 3 }
    },
    { # 25. func main() @ main.go:18
      name: main, package: 28, signature: 29, loc: 18,
      metrics: { codeCount: 4, complexity: 1, indents: 2, lineCount: 4 }
    }
  ],
  objects: [
    { # 26. main.Foo[T string|int|uint]{ value T }{ Add(v T) T }
      name: Foo, package: 28, data: 35, loc: 5,
      instances: [ 15 ],
      methods: [ 23 ],
      typeParams: [ 38 ]
    }
  ],
  packages: [
    { # 27. $builtin package
      name: $builtin,
      path: $builtin,
      interfaces: [ 16, 17 ]
    },
    { # 28. main package
      name: main,
      path: command-line-arguments,
      objects: [ 26 ],
      methods: [ 23, 24, 25 ]
    }
  ],
  signatures: [
    {}, # 29. func()
    { results: [ 4 ] }, # 30. func() Foo[T<string|int>]
    { results: [ 5 ] }, # 31. func() T<any>
    { params: [ 7 ], results: [ 3 ] }, # 32. func(v T<string|int>) Pointer[Foo[T]]
    { params: [ 8 ], results: [ 6 ] }  # 33. func(v T<string|int|uint>) T
  ],
  structDescs: [
    { fields: [ 12 ] }, # 34. struct{ value T<string|int> }
    { fields: [ 13 ] }  # 35. struct{ value T<string|int|uint> }
  ],
  typeParams: [
    { name: T, type: 17 }, # 36. T any
    { name: T, type: 19 }, # 37. T string|int
    { name: T, type: 20 }  # 38. T string|int|uint
  ],
  locs: {
    '1': main.go
  }
}
