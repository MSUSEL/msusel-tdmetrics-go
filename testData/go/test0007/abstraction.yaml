{
  language: go,
  abstracts: [
    { exported: true, name: $deref, signature: 2 }, # 1. func $deref() ???
    { exported: true, name: $deref, signature: 3 }, # 2. func $deref() ???
    { exported: true, name: Add,    signature: 5 }  # 3. func Add( ??? ) ???
  ],
  arguments: [
    { type: interfaceInst1 },      # 1. TODO: Finish Annotating
    { type: objectInst2 },         # 2.
    { type: typeParam1 },          # 3.
    { type: typeParam3 },          # 4.
    { name: v, type: typeParam2 }, # 5.
    { name: v, type: typeParam3 }  # 6.
  ],
  basics: [ int, uint, string ],
  fields: [
    { name: value, type: basic3 },     # 1. value string
    { name: value, type: typeParam2 }, # 2. value string|int
    { name: value, type: typeParam3 }  # 3. value string|int|uint
  ],
  interfaceDecls: [
    { # 1. Pointer[T any] {  ???  }
      name: Pointer, package: 1, interface: 5, exported: true,
      instances:  [ 1 ],
      typeParams: [ 1 ]
    },
    { # 2. any
      name: any, package: 1, interface: 1, exported: true
    }
  ],
  interfaceDescs: [
    {}, # 1. any
    {   # 2. string|int
      exact: [ basic3, basic1 ],
      # inherits 3 because 2 is more restrictive and can be used anywhere 3 can be,
      # but 3 can't be used anywhere 2 can be since 3 might be an uint instance.
      inherits: [ 3 ]
    },
    { # 3. string|int|uint
      exact:    [ basic3, basic1, basic2 ],
      inherits: [ 1 ]
    },
    { # 4. interface { ??? }
      abstracts: [ 1 ],
      inherits:  [ 1 ]
    },
    { # 5. interface { ??? }
      abstracts: [ 2 ],
      inherits:  [ 1 ]
    },
    { # 6. interface { ??? }
      abstracts: [ 3 ],
      inherits:  [ 1 ]
    }
  ],
  interfaceInsts: [
    { # 1. 
      generic: 1, resolved: 4,
      instanceTypes: [ objectInst2 ]
    }
  ],
  methods: [
    { # 1.
      name: Add, package: 2, signature: 5, exported: true,
      receiver: 1, loc: 9, metrics: 1
    },
    { # 2.
      name: New, package: 2, signature: 4, exported: true,
      loc: 14, metrics: 2,
      typeParams: [ 2 ]
    },
    { # 3.
      name: main, package: 2, signature: 1,
      loc: 18, metrics: 3
    }
  ],
  metrics: [
    { # 1.
      codeCount: 4, complexity: 1, indents: 2, lineCount: 4, loc: 9,
      reads:  [ object1, selection3 ],
      writes: [ selection3 ]
    },
    { # 2.
      codeCount: 3, complexity: 1, indents: 1, lineCount: 3, loc: 14,
      reads: [ object1, objectInst2, selection2 ]
    },
    { # 3.
      codeCount: 4, complexity: 1, indents: 2, lineCount: 4, loc: 18,
      invokes: [ method2, selection1 ],
      reads:   [ objectInst1 ],
      writes:  [ objectInst1 ]
    }
  ],
  objectInsts: [
    { # 1. Foo[string]
      generic: 1, resolved: 1,
      instanceTypes: [ basic3 ]
    },
    { # 2. Foo[string|int]
      generic: 1, resolved: 2,
      instanceTypes: [ typeParam2 ]
    }
  ],
  objects: [
    { # 1. Foo[T string|int|uint] ???
      loc: 5, name: Foo, package: 2,
      exported: true, data: 3, interface: 6,
      instances:  [ 1, 2 ],
      methods:    [ 1 ],
      typeParams: [ 3 ]
    }
  ],
  packages: [
    { # 1. $builtin package
      name: $builtin,
      path: $builtin,
      interfaces: [ 1, 2 ]
    },
    { # 2. main package
      name: main,
      path: command-line-arguments,
      methods: [ 1, 2, 3 ],
      objects: [ 1 ]
    }
  ],
  selections: [
    { name: Add,   origin: objectInst1 }, # 1. Foo[string].Add
    { name: value, origin: objectInst2 }, # 2. Foo[string|int].value
    { name: value, origin: object1 }      # 3. Foo[string|int|uint].value
  ],
  signatures: [
    {},                                # 1. func()()
    { results: [ 2 ] },                # 2. func() ???
    { results: [ 3 ] },                # 3. func() ???
    { params: [ 5 ], results: [ 1 ] }, # 4. func( ??? ) ???
    { params: [ 6 ], results: [ 4 ] }  # 5. func( ??? ) ???
  ],
  structDescs: [
    { fields: [ 1 ] }, # 1. struct { value string }
    { fields: [ 2 ] }, # 2. struct { value string|int }
    { fields: [ 3 ] }  # 3. struct { value string|int|uint }
  ],
  typeParams: [
    { name: T, type: interfaceDecl2 }, # 1. T any
    { name: T, type: interfaceDesc2 }, # 2. T string|int
    { name: T, type: interfaceDesc3 }  # 3. T string|int|uint
  ],
  locs: {
    '1': main.go
  }
}
