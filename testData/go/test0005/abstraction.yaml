{
  language: go,
  abstracts: [
    { name: $deref, signature: 53 }, # 1. func $deref() Cat
    { name: $deref, signature: 54 }, # 2. func $deref() T<any>
    { name: $get,   signature: 57 }, # 3. func $get(index int) (value Pointer[Cat])
    { name: $get,   signature: 58 }, # 4. func $get(index int) (value T<any>)
    { name: $len,   signature: 50 }, # 5. func $len() int
    { name: $set,   signature: 59 }, # 6. func $set(index int, value Pointer[Cat])
    { name: $set,   signature: 60 }, # 7. func $set(index int, value T<any>)
    { name: Play,   signature: 55 }  # 8. func Play(c Pointer[Cat])
  ],
  arguments: [
    { type: 22 }, #  9. <unnamed> int
    { type: 23 }, # 10. <unnamed> string
    { type: 27 }, # 11. <unnamed> Pointer[Cat]
    { type: 45 }, # 12. <unnamed> Cat
    { type: 65 }, # 13. <unnamed> T<any>
    { name: age,   type: 22 }, # 14. age int
    { name: c,     type: 27 }, # 15. c Pointer[Cat]
    { name: cats,  type: 28 }, # 16. cats List[Pointer[Cat]]
    { name: index, type: 22 }, # 17. index int
    { name: name,  type: 23 }, # 18. name string
    { name: value, type: 23 }, # 19. value string
    { name: value, type: 27 }, # 20. value Pointer[Cat]
    { name: value, type: 65 }  # 21. value T<any>
  ],
  basics: [
    int,   # 22. int
    string # 23. string
  ],
  fields: [
    { name: Age,   type: 22 }, # 24. Age int
    { name: Name,  type: 23 }, # 25. Name string
    { name: $data, type: 28 }  # 26. $data List[Pointer[Cat]]
  ],
  instances: [
    { # 27. Pointer[Cat]{ $deref() Cat }
      generic: 30,
      instanceTypes: [ 45 ],
      resolved: 34
    },
    { # 28. List[Pointer[Cat]]{ $len() int; $get(int) Pointer[Cat]; $set(int, Pointer[Cat]) }
      generic: 29,
      instanceTypes: [ 27 ],
      resolved: 36
    }
  ],
  interfaceDecls: [
    { # 29. interface List[T any]{ $len() int; $get(int) T<any>; $set(int, T<any>) }
      name: List, package: 47, interface: 37,
      typeParams: [ 65 ],
      instances: [ 28 ]
    },
    { # 30. interface Pointer[T any]{ $deref() T<any> }
      name: Pointer, package: 47, interface: 35,
      typeParams: [ 65 ],
      instances: [ 27 ]
    },
    { # 31. interface $builtin.any{}
      name: any, package: 47, interface: 33
    },
    { # 32. interface cats.Toy{ Play(c Pointer[Cat]) } @ main.go:13
      name: Toy, package: 48, interface: 38, loc: 13
    }
  ],
  interfaceDescs: [
    {}, # 33. interface{}
    {   # 34. interface{ $deref() Cat }
      abstracts: [ 1 ]
    },
    { # 35. interface{ $deref() T<any> }
      abstracts: [ 2 ]
    },
    { # 36. interface{ $len() int; $get(int) Pointer[Cat]; $set(int, Pointer[Cat]) }
      abstracts: [ 5, 3, 6 ]
    },
    { # 37. interface{ $len() int; $get(int) T<any>; $set(int, T<any>) }
      abstracts: [ 5, 4, 7 ]
    },
    { # 38. interface{ Play(c Pointer[Cat]) }
      abstracts: [ 8 ]
    }
  ],
  methods: [
    { # 39. func (cats.Cat) Meow() @ main.go:49
      loc: 36, name: Meow, package: 48, receiver: 45, signature: 49,
      metrics: { codeCount: 3, complexity: 1, indents: 1, lineCount: 3 }
    },
    { # 40. func NewCat(name string, age int) Pointer[Cat] @ main.go:27
      name: NewCat, package: 48, signature: 61, loc: 27,
      metrics: { codeCount: 6, complexity: 1, indents: 6, lineCount: 6 }
    },
    { # 41. func NextYear(cats ...List[Pointer[Cat]]) @ main.go:46
      name: NextYear, package: 48, signature: 56, loc: 46,
      metrics: { codeCount: 5, complexity: 2, indents: 4, lineCount: 5 }
    },
    { # 42. func Pet(c Pointer[Cat]) @ main.go:65
      name: Pet, package: 48, signature: 55, loc: 65,
      metrics: { codeCount: 3, complexity: 1, indents: 1, lineCount: 3 }
    },
    { # 43. func (cats.Cat) String() string @ main.go:41
      name: String, package: 48, receiver: 45, signature: 51, loc: 41,
      metrics: { codeCount: 3, complexity: 1, indents: 1, lineCount: 3 }
    },
    { # 44. func (cats.Cat) Youngest() Cat @ main.go:53
      name: Youngest, package: 48, receiver: 46, signature: 52, loc: 53,
      metrics: { codeCount: 9, complexity: 4, indents: 11, lineCount: 9 }
    }
  ],
  objects: [
    { # 45. Cat struct{ Name string; Age int } { Meow; String; } @ main.go:7
      name: Cat, package: 48, data: 63, loc: 7,
      methods: [ 39, 43 ]
    },
    { # 46. Cats struct{ $data List[Pointer[Cat]] } { Youngest() Cat } @ main.go:20
      name: Cats, package: 48, data: 64, loc: 20,
      methods: [ 44 ]
    }
  ],
  packages: [
    { # 47. package $builtin
      name: $builtin,
      path: $builtin,
      interfaces: [ 29, 30, 31 ]
    },
    { # 48. package cats
      name: cats,
      path: command-line-arguments,
      interfaces: [ 32 ],
      methods: [ 39, 40, 41, 42, 43, 44 ],
      objects: [ 45, 46 ],
      values: [ 66 ]
    }
  ],
  signatures: [
    {}, # 49. func()()
    { results: [  9 ] }, # 50. func() int
    { results: [ 10 ] }, # 51. func() string
    { results: [ 11 ] }, # 52. func() Pointer[Cat]
    { results: [ 12 ] }, # 53. func() Cat
    { results: [ 13 ] }, # 54. func() T<any>
    { params: [ 15 ] },  # 55. func(c Pointer[Cat])
    { params: [ 16 ], variadic: true },  # 56. func(cats ...List[Pointer[Cat]])
    { params: [ 17 ], results: [ 20 ] }, # 57. func(index int) (value Pointer[Cat])
    { params: [ 17 ], results: [ 21 ] }, # 58. func(index int) (value T<any>)
    { params: [ 17, 20 ] }, # 59. func(index int, value Pointer[Cat])
    { params: [ 17, 21 ] }, # 60. func(index int, value T<any>)
    { params: [ 18, 14 ], results: [ 11 ] }, # 61. func(name string, age int) Pointer[Cat]
    { params: [ 19 ] } # 62. func(value string)
  ],
  structDescs: [
    { fields: [ 25, 24 ] }, # 63. struct{ Name string; Age int }
    { fields: [ 26 ] }      # 64. struct{ $data List[Pointer[Cat]] }
  ],
  typeParams: [
    { name: T, type: 31 } # 65. T any
  ],
  values: [
    { # 66. cats.log := func(value string) @ main.go:24
      name: log, package: 48, type: 62, loc: 24
    }
  ],
  locs: {
    '1': cats.go
  }
}
