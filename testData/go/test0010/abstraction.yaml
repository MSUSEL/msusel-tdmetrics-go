{
  language: go,
  abstracts: [
    { name: $deref, signature: 2, vis: exported }, # 1. $deref() A[T <int|float64|string>]
    { name: $deref, signature: 3, vis: exported }, # 2. $deref() A[int]
    { name: $deref, signature: 4, vis: exported }, # 3. $deref() A[float64]
    { name: $deref, signature: 5, vis: exported }, # 4. $deref() A[string]
    { name: $deref, signature: 6, vis: exported }, # 5. $deref() T <any>
    { name: Mul,    signature: 7, vis: exported }  # 6. Mul(v int)
  ],
  arguments: [
    {          type: object1 },     # 1. <unnamed> A[T <int|float64|string>]
    {          type: objectInst1 }, # 2. <unnamed> A[int]
    {          type: objectInst2 }, # 3. <unnamed> A[float64]
    {          type: objectInst3 }, # 4. <unnamed> A[string]
    {          type: typeParam1 },  # 5. <unnamed> T <any>
    { name: v, type: basic1 }       # 6. v int
  ],
  basics: [ int, float64, string ],
  fields: [
    { name: value, type: basic1 },    # 1. value int
    { name: value, type: basic2 },    # 2. value float64
    { name: value, type: basic3 },    # 3. value string
    { name: value, type: typeParam2 } # 4. value T <int|float64|string>
  ],
  interfaceDecls: [
    { # 1. Pointer[T any]{ $deref() T }
      name: Pointer, package: 1, interface: 7, vis: exported,
      instances: [ 1, 2, 3, 4 ],
      typeParams: [ 1 ]
    }
  ],
  interfaceDescs: [
    {}, # 1. any
    {   # 2. int|float64|string
      exact: [ basic1, basic2, basic3 ], inherits: [ 1 ]
    },
    { # 3. interface{ $deref() A[T <int|float64|string>]; Mul(v int) }
      abstracts: [ 1, 6 ], inherits: [ 7 ], hint: pointer
    },
    { # 4. interface{ $deref() A[int]; Mul(v int) }
      abstracts: [ 2, 6 ], inherits: [ 3 ], hint: pointer
    },
    { # 5. interface{ $deref() A[float64]; Mul(v int) }
      abstracts: [ 3, 6 ], inherits: [ 3 ], hint: pointer
    },
    { # 6. interface{ $deref() A[string]; Mul(v int) }
      abstracts: [ 4, 6 ], inherits: [ 3 ], hint: pointer
    },
    { # 7. interface{ $deref() T <any> }
      abstracts: [ 5 ], inherits: [ 1 ], hint: pointer
    }
  ],  
  interfaceInsts: [
    { # 1. Pointer[A[T <int|float64|string>]]{ $deref() A[T]; Mul(v int) }
      generic: 1, resolved: 3, instanceTypes: [ object1 ]
    },
    { # 2. Pointer[A[int]]{ $deref() A[int]; Mul(v int) }
      generic: 1, resolved: 4, instanceTypes: [ objectInst1 ]
    },
    { # 3. Pointer[A[float64]]{ $deref() A[float64]; Mul(v int) }
      generic: 1, resolved: 5, instanceTypes: [ objectInst2 ]
    },
    { # 4. Pointer[A[string]]{ $deref() A[string]; Mul(v int) }
      generic: 1, resolved: 6, instanceTypes: [ objectInst3 ]
    }
  ],
  methodInsts: [
    { # 1. func (A[int]) Mul(v int)
      generic: 1, receiver: 1, resolved: 7, metrics: 1,
      instanceTypes: [ basic1 ]
    },
    { # 2. func (A[float64]) Mul(v int)
      generic: 1, receiver: 2, resolved: 7, metrics: 1,
      instanceTypes: [ basic2 ]
    },
    { # 3. func (A[string]) Mul(v int)
      generic: 1, receiver: 3, resolved: 7, metrics: 1,
      instanceTypes: [ basic3 ]
    }
  ],
  methods: [
    { # 1. func (A[T int|float64|string]) Mul(v int)
      name: Mul, package: 2, vis: exported, ptrRecv: true, loc: 12,
      metrics: 1, receiver: 1, signature: 7,
      instances: [ 1, 2, 3 ]
    },
    { # 2. func main()
      name: main, package: 2, loc: 29,
      metrics: 2, signature: 1
    }
  ],
  metrics: [
    { # 1. A.Mul(v int) metrics
      loc: 12, codeCount: 16, complexity: 5, indents: 23, lineCount: 16,
      reads: [
        interfaceInst1,
        selection4 # Pointer[A[T <int|float64|string>].value T 
      ],
      writes: [
        selection4 # Pointer[A[T <int|float64|string>].value T 
      ]
    },
    { # 2. main() metrics
      loc: 29, codeCount: 11, complexity: 1, indents: 9, lineCount: 13,
      sideEffect: true,
      invokes: [
        selection1, # A[int].Mul
        selection2, # A[float64].Mul
        selection3  # A[string].Mul
      ],
      reads: [
        objectInst1, # A[int]
        objectInst2, # A[float64]
        objectInst3, # A[string]
        selection5,  # A[int].value int
        selection6,  # A[float64].value int
        selection7   # A[string].value int
      ],
      writes: [
        objectInst1, # A[int]
        objectInst2, # A[float64]
        objectInst3, # A[string]
        selection5,  # A[int].value int 
        selection6,  # A[float64].value int
        selection7   # A[string].value int
      ]
    }
  ],
  objectInsts: [
    { # 1. main.A[int]{ value int }{ Mul(v int) }
      generic: 1, resData: 1, resInterface: 1,
      instanceTypes: [ basic1 ],
      methods: [ 1 ]
    },
    { # 2. main.A[float64]{ value float64 }{ Mul(v float64) }
      generic: 1, resData: 2, resInterface: 1,
      instanceTypes: [ basic2 ],
      methods: [ 2 ]
    },
    { # 3. main.A[string]{ value string }{ Mul(v string) }
      generic: 1, resData: 3, resInterface: 1,
      instanceTypes: [ basic3 ],
      methods: [ 3 ]
    }
  ],
  objects: [
    { # 1. main.A[T int|float64|string]{ value T }{ Mul(v int) }
      name: A, package: 2, data: 4, interface: 1,
      vis: exported, loc: 8,
      typeParams: [ 2 ], methods: [ 1 ],
      instances: [ 1, 2, 3 ],
    }
  ],
  packages: [
    { # 1. $builtin package
      name: $builtin, path: $builtin,
      interfaces: [ 1 ]
    },
    { # 2. main package
      name: main, path: command-line-arguments,
      methods: [ 1, 2 ],
      objects: [ 1 ]
    }
  ],
  selections: [
    { name: Mul,   origin: objectInst1 },    # 1. A[int].Mul
    { name: Mul,   origin: objectInst2 },    # 2. A[float64].Mul
    { name: Mul,   origin: objectInst3 },    # 3. A[string].Mul
    { name: value, origin: interfaceInst1 }, # 4. Pointer[A[T <int|float64|string>].value T
    { name: value, origin: objectInst1 },    # 5. A[int].value int
    { name: value, origin: objectInst2 },    # 6. A[float64].value int
    { name: value, origin: objectInst3 }     # 7. A[string].value int
  ],
  signatures: [
    {},                 # 1. func()()
    { results: [ 1 ] }, # 2. func() A[T <int|float64|string>]
    { results: [ 2 ] }, # 3. func() A[int]
    { results: [ 3 ] }, # 4. func() A[float64]
    { results: [ 4 ] }, # 5. func() A[string]
    { results: [ 5 ] }, # 6. func() T <any>
    { params:  [ 6 ] }  # 7. func(v int)
  ],
  structDescs: [
    { fields: [ 1 ] }, # 1. struct{ value int }
    { fields: [ 2 ] }, # 2. struct{ value float64 }
    { fields: [ 3 ] }, # 3. struct{ value string }
    { fields: [ 4 ] }  # 4. struct{ value T <int|float64|string> }
  ],
  typeParams: [
    { name: T, type: interfaceDesc1 }, # 1. T any
    { name: T, type: interfaceDesc2 }  # 2. T int|float64|string
  ],
  locs: {
    '1': main.go
  }
}
