{
  language: go,
  abstracts: [
    { name: $compare, signature: 26, exported: true }, #  1. $compare(other any) int
    { name: $deref,   signature:  2, exported: true }, #  2. $deref() int
    { name: $deref,   signature:  6, exported: true }, #  3. $deref() T <any>
    { name: $deref,   signature:  7, exported: true }, #  4. $deref() V <any>
    { name: $get,     signature:  8, exported: true }, #  5. $get(index int)(value string)
    { name: $get,     signature:  9, exported: true }, #  6. $get(index int)(value Pointer[T <any>])
    { name: $get,     signature: 10, exported: true }, #  7. $get(index int)(value Pointer[int])
    { name: $get,     signature: 11, exported: true }, #  8. $get(index int)(value Pointer[TValue <any>])
    { name: $get,     signature: 12, exported: true }, #  9. $get(index int)(value K <any>)
    { name: $get,     signature: 13, exported: true }, # 10. $get(index int)(value T <any>)
    { name: $get,     signature: 20, exported: true }, # 11. $get(key string)(value Pointer[int], found bool)
    { name: $get,     signature: 22, exported: true }, # 12. $get(key K <any>)(value Pointer[TValue <any>], found bool)
    { name: $get,     signature: 24, exported: true }, # 13. $get(key TKey <comparable>)(value TValue <any>, found bool)
    { name: $len,     signature:  2, exported: true }, # 14. $len() int
    { name: $set,     signature: 14, exported: true }, # 15. $set(index int, value string)
    { name: $set,     signature: 15, exported: true }, # 16. $set(index int, value Pointer[T <any>])
    { name: $set,     signature: 16, exported: true }, # 17. $set(index int, value Pointer[int])
    { name: $set,     signature: 17, exported: true }, # 18. $set(index int, value Pointer[TValue <any>])
    { name: $set,     signature: 18, exported: true }, # 19. $set(index int, value K <any>)
    { name: $set,     signature: 19, exported: true }, # 20. $set(index int, value T <any>)
    { name: $set,     signature: 21, exported: true }, # 21. $set(key string, value Pointer[int])
    { name: $set,     signature: 23, exported: true }, # 22. $set(key K <any>, value Pointer[TValue <any>])
    { name: $set,     signature: 25, exported: true }, # 23. $set(key TKey <comparable>, value TValue <any>)
    { name: AsSlices, signature:  3, exported: true }, # 24. AsSlices()(List[T <any>], List[Pointer[T <any>]])
    { name: AsSlices, signature:  4, exported: true }, # 25. AsSlices()(List[T <any>], List[Pointer[int]])
    { name: AsSlices, signature:  5, exported: true }  # 26. AsSlices()(List[K <any>], List[Pointer[TValue <any>]])
  ],
  arguments: [
    {              type: basic2 },         #  1. <unnamed> int
    {              type: interfaceDecl1 }, #  2. <unnamed> List[T <any>]
    {              type: interfaceInst4 }, #  3. <unnamed> List[Pointer[T <any>]]
    {              type: interfaceInst5 }, #  4. <unnamed> List[Pointer[int]]
    {              type: interfaceInst6 }, #  5. <unnamed> List[Pointer[TValue <any>]]
    {              type: interfaceInst7 }, #  6. <unnamed> List[K <any>]
    {              type: typeParam5 },     #  7. <unnamed> T <any>
    {              type: typeParam8 },     #  8. <unnamed> V <any>
    { name: found, type: basic1 },         #  9. found bool
    { name: index, type: basic2 },         # 10. index int
    { name: key,   type: basic3 },         # 11. key string
    { name: key,   type: typeParam2 },     # 12. key K <any>
    { name: key,   type: typeParam6 },     # 13. key TKey <comparable>
    { name: other, type: interfaceDesc1 }, # 14. other any
    { name: s,     type: interfaceInst3 }, # 15. s List[string]
    { name: s,     type: interfaceInst5 }, # 16. s List[Pointer[int]]
    { name: s,     type: typeParam4 },     # 17. s S <~List[T any]>
    { name: value, type: basic3 },         # 18. value string
    { name: value, type: interfaceDecl3 }, # 19. value Pointer[T <any>]
    { name: value, type: interfaceInst1 }, # 20. value Pointer[int]
    { name: value, type: interfaceInst2 }, # 21. value Pointer[TValue <any>]
    { name: value, type: typeParam2 },     # 22. value K <any>
    { name: value, type: typeParam5 },     # 23. value T <any>
    { name: value, type: typeParam7 }      # 24. value TValue <any>
  ],
  basics: [ bool, int, string ],
  fields: [
    { name: Set, type: objectInst1, exported: true }, # 1. Set Set[string, V int, M Map[string, Pointer[int]]]
    { name: m,   type: interfaceInst8 },              # 2. m Map[string, Pointer[int]]
    { name: m,   type: typeParam3 }                   # 3. m M <~Map[K any, Pointer[TValue any]]>
  ],
  interfaceDecls: [
    { # 1. $builtin.List[T any]{ $len() int; $get(index int)(value T); $set(index int, value T) }
      name: List, package: 1, exported: true, interface: 13,
      typeParams: [ 5 ], instances: [ 3, 4, 5, 6, 7 ]
    },
    { # 2. $builtin.Map[TKey comparable, TValue any]{ $len() int; $get(key TKey)(value TValue, found bool); $set(key TKey, value TValue) }
      name: Map, package: 1, exported: true, interface: 16,
      typeParams: [ 6, 7 ], instances: [ 8, 9 ]
    },
    { # 3. $builtin.Pointer[T any]{ $deref() T <any> }
      name: Pointer, package: 1, exported: true, interface: 6,
      typeParams: [ 5 ], instances: [ 1, 2 ]
    },
    { # 4. $builtin.comparable{ $compare(other any) int }
      name: comparable, package: 1, exported: true, interface: 4
    }
  ],
  interfaceDescs: [
    {}, # 1. any
    {   # 2. ~List[T any]
      approx: [ interfaceDecl1 ], inherits: [ 1 ]
    },
    { # 3. ~Map[K any, Pointer[TValue any]]
      approx: [ interfaceInst9 ], inherits: [ 1 ]
    },
    { # 4. interface{ $compare(other any) int }
      abstracts: [ 1 ], inherits: [ 1 ], hint: comparable
    },
    { # 5. interface{ $deref() int }
      abstracts: [ 2 ], inherits: [ 1 ], hint: pointer
    },
    { # 6. interface{ $deref() T <any> }
      abstracts: [ 3 ], inherits: [ 1 ], hint: pointer
    },
    { # 7. interface{ $deref() V <any> }
      abstracts: [ 4 ], inherits: [ 1 ], hint: pointer
    },
    { # 8. interface{ $len() int; $get(index int)(value string); $set(index int, value string) }
      abstracts: [ 14, 5, 15 ], inherits: [ 1 ], hint: list
    },
    { # 9. interface{ $len() int; $get(index int)(value Pointer[T <any>]); $set(index int, value Pointer[T <any>]) }
      abstracts: [ 14, 6, 16 ], inherits: [ 1 ], hint: list
    },
    { # 10. interface{ $len() int; $get(index int)(value Pointer[int]); $set(index int, value Pointer[int]) }
      abstracts: [ 14, 7, 17 ], inherits: [ 1 ], hint: list
    },
    { # 11. interface{ $len() int; $get(index int)(value Pointer[TValue <any>]); $set(index int, value Pointer[TValue <any>]) }
      abstracts: [ 14, 8, 18 ], inherits: [ 1 ], hint: list
    },
    { # 12. interface{ $len() int; $get(index int)(value K <any>); $set(index int, value K <any>) }
      abstracts: [ 14, 9, 19 ], inherits: [ 1 ], hint: list
    },
    { # 13. interface{ $len() int; $get(index int)(value T <any>); $set(index int, value T <any>) }
      abstracts: [ 14, 10, 20 ], inherits: [ 1 ], hint: list
    },
    { # 14. interface{ $len() int; $get(key string)(value Pointer[int], found bool); $set(key string, value Pointer[int]) }
      abstracts: [ 14, 11, 21 ], inherits: [ 1 ], hint: map
    },
    { # 15. interface{ $len() int; $get(key K <any>)(value Pointer[TValue <any>], found bool); $set(key K <any>, value Pointer[TValue <any>]) }
      abstracts: [ 14, 12, 22 ], inherits: [ 1 ], hint: map
    },
    { # 16. interface{ $len() int; $get(key TKey <comparable>)(value TValue <any>, found bool); $set(key TKey <comparable>, value TValue <any>) }
      abstracts: [ 14, 13, 23 ], inherits: [ 1 ], hint: map
    },
    { # 17. interface{ AsSlices()(List[T <any>], List[Pointer[T <any>]]) }
      abstracts: [ 24 ], inherits: [ 1 ]
    },
    { # 18. interface{ AsSlices()(List[T <any>], List[Pointer[int]]) }
      abstracts: [ 25 ], inherits: [ 1 ]
    },
    { # 19. interface{ AsSlices()(List[K <any>], List[Pointer[TValue <any>]]) }
      abstracts: [ 26 ], inherits: [ 1 ]
    }
  ],
  interfaceInsts: [
    { # 1. Pointer[int]
      generic: 3, resolved: 5, instanceTypes: [ basic2 ]
    },
    { # 2. Pointer[V any]
      generic: 3, resolved: 7, instanceTypes: [ typeParam8 ]
    },
    { # 3. List[string]
      generic: 1, resolved: 8, instanceTypes: [ basic3 ]
    },
    { # 4. List[Pointer[T any]]
      generic: 1, resolved: 9, instanceTypes: [ interfaceDecl3 ]
    },
    { # 5. List[Pointer[int]]
      generic: 1, resolved: 10, instanceTypes: [ interfaceInst1 ]
    },
    { # 6. List[Pointer[V any]]
      generic: 1, resolved: 11, instanceTypes: [ interfaceInst2 ]
    },
    { # 7. List[K any]
      generic: 1, resolved: 12, instanceTypes: [ typeParam2 ]
    },
    { # 8. Map[string, Pointer[int]]
      generic: 2, resolved: 14, instanceTypes: [ basic3, interfaceInst1 ]
    },
    { # 9. Map[K any, Pointer[V any]]
      generic: 2, resolved: 15, instanceTypes: [ typeParam2, interfaceInst2 ]
    }
  ],
  methodInsts: [
    { # 1. (Set[K any, V any, M ~Map[K, Pointer[V]]]) AsSlice()(List[K], List[Pointer[V]])
      generic: 1, receiver: 2, resolved: 3, instanceTypes: [ typeParam2, typeParam8, typeParam3 ]
    },
    { # 2. (Set[string, int, Map[string, Pointer[int]]]) AsSlice()(List[string], List[Pointer[int]])
      generic: 1, receiver: 1, resolved: 4, instanceTypes: [ basic3, basic2, interfaceInst8 ]
    },
    { # 3. PrintSlice[string, List[string]](s S)
      generic: 2, resolved: 27, instanceTypes: [ basic3, interfaceInst3 ]
    },
    { # 4. PrintSlice[Pointer[int], List[Pointer[int]]](s S)
      generic: 2, resolved: 28, instanceTypes: [ interfaceInst1, interfaceInst5 ]
    }
  ],
  methods: [
    { # 1. (main.Set[K comparable, V any, M ~Map[K <any>, Pointer[TValue <any>]]]) AsSlice()(List[K], List[Pointer[TValue]])
      name: AsSlices, package: 2, receiver: 2, signature: 5,
      exported: true, loc: 13, metrics: 1,
      instances: [ 1, 2 ]
    },
    { # 2. main.PrintSlice[T any, S ~List[T]](s S)
      name: PrintSlice, package: 2, signature: 29,
      exported: true, loc: 25, metrics: 2,
      typeParams: [ 5, 4 ], instances:  [ 3, 4 ]
    },
    { # 3. main.main()
      name: main, package: 2, signature: 1,
      loc: 40, metrics: 3
    }
  ],
  metrics: [
    { # 1. (Set) AsSlice metrics
      loc: 13, codeCount: 11, complexity: 2, indents: 12, lineCount: 11,
      reads:  [ interfaceDecl4, objectInst2, selection4 ],
      writes: [ interfaceDecl4 ]
    },
    { # 2. PrintSlice metrics
      loc: 25, codeCount: 10, complexity: 3, indents: 13, lineCount: 10,
      sideEffect: true
    },
    { # 3. main metrics
      loc: 40, codeCount: 16, complexity: 1, indents: 26, lineCount: 16,
      sideEffect: true,
      invokes: [ methodInst3, methodInst4, selection1 ],
      reads:   [ object1, objectInst1 ],
      writes:  [ object1, objectInst1, selection2, selection3 ]
    }
  ],
  objectInsts: [
    { # 1. main.Set[string, V int, M Map[string, Pointer[int]]]
      generic: 2, resData: 2, resInterface: 18,
      instanceTypes: [ basic3, basic2, interfaceInst8 ],
      methods: [ 2 ]
    },
    { # TODO: Determine how `K` became `any` which isn't a supertype of `comparable`.
      wrong: "FIX",
      # 2. main.Set[K any, V any, M ~Map[K any, Pointer[V any]]]
      generic: 2, resData: 3, resInterface: 17,
      instanceTypes: [ typeParam2, typeParam8, typeParam3 ],
      methods: [ 1 ]
    }
  ],
  objects: [
    { # 1. main.Bacon{ Set Set[string, V int, M Map[string, Pointer[int]]] }{}
      name: Bacon, package: 2, data: 1,
      exported: true, interface: 1, loc: 36
    },
    { # TODO: Shouldn't it be `~Map[K comparable, ...]`?
      # 2. main.Set[K comparable, V any, M ~Map[K any, Pointer[V any]]]{ m M }
      name: Set, package: 2, data: 3,
      exported: true, interface: 19, loc: 9,
      methods: [ 1 ], typeParams: [ 1, 8, 3 ], instances: [ 1, 2 ]
    }
  ],
  packages: [
    { # 1. $builtin package
      name: $builtin, path: $builtin,
      interfaces: [ 1, 2, 3, 4 ]
    },
    { # 2. main package
      name: main, path: command-line-arguments,
      methods: [ 1, 2, 3 ], objects: [ 1, 2 ]
    }
  ],
  selections: [
    { name: AsSlices, origin: object1 },     # 1. Bacon.AsSlices
    { name: Set,      origin: object1 },     # 2. Bacon.Set
    { name: m,        origin: objectInst1 }, # 3. Set[string, V int, M Map[string, Pointer[int]]].m
    { name: m,        origin: objectInst2 }  # 4. Set[K any, V any, M ~Map[K any, Pointer[V any]]].m
  ],
  signatures: [
    {},                                     #  1. func()()
    { results: [ 1 ] },                     #  2. func() int
    { results: [ 2, 3 ] },                  #  3. func()(List[T <any>], List[Pointer[T <any>]])
    { results: [ 2, 4 ] },                  #  4. func()(List[T <any>], List[Pointer[int]])
    { results: [ 6, 5 ] },                  #  5. func()(List[K <any>], List[Pointer[TValue <any>]])
    { results: [ 7 ] },                     #  6. func() T <any>
    { results: [ 8 ] },                     #  7. func() V <any>
    { params: [ 10 ], results: [ 18 ] },    #  8. func(index int)(value string)
    { params: [ 10 ], results: [ 19 ] },    #  9. func(index int)(value Pointer[T <any>])
    { params: [ 10 ], results: [ 20 ] },    # 10. func(index int)(value Pointer[int])
    { params: [ 10 ], results: [ 21 ] },    # 11. func(index int)(value Pointer[TValue <any>])
    { params: [ 10 ], results: [ 22 ] },    # 12. func(index int)(value K <any>)
    { params: [ 10 ], results: [ 23 ] },    # 13. func(index int)(value T <any>)
    { params: [ 10, 18 ] },                 # 14. func(index int, value string)
    { params: [ 10, 19 ] },                 # 15. func(index int, value Pointer[T <any>])
    { params: [ 10, 20 ] },                 # 16. func(index int, value Pointer[int])
    { params: [ 10, 21 ] },                 # 17. func(index int, value Pointer[TValue <any>])
    { params: [ 10, 22 ] },                 # 18. func(index int, value K <any>)
    { params: [ 10, 23 ] },                 # 19. func(index int, value T <any>)
    { params: [ 11 ], results: [ 20, 9 ] }, # 20. func(key string)(value Pointer[int], found bool)
    { params: [ 11, 20 ] },                 # 21. func(key string, value Pointer[int])
    { params: [ 12 ], results: [ 21, 9 ] }, # 22. func(key K <any>)(value Pointer[TValue <any>], found bool)
    { params: [ 12, 21 ] },                 # 23. func(key K <any>, value Pointer[TValue <any>])
    { params: [ 13 ], results: [ 24, 9 ] }, # 24. func(key TKey <comparable>)(value TValue <any>, found bool)
    { params: [ 13, 24 ] },                 # 25. func(key TKey <comparable>, value TValue <any>)
    { params: [ 14 ], results: [ 1 ] },     # 26. func(other any) int
    { params: [ 15 ] },                     # 27. func(s List[string])
    { params: [ 16 ] },                     # 28. func(s List[Pointer[int]])
    { params: [ 17 ] }                      # 29. func(s S <~List[T <any>]>)
  ],
  structDescs: [
    { fields: [ 1 ] }, # 1. struct{ Set Set[string, V int, M Map[string, Pointer[int]]] }
    { fields: [ 2 ] }, # 2. struct{ m Map[string, Pointer[int]] }
    { fields: [ 3 ] }  # 3. struct{ m M <~Map[K any, Pointer[V any]]> }
  ],
  typeParams: [
    { name: K,      type: interfaceDecl4 }, # 1. K comparable
    { name: K,      type: interfaceDesc1 }, # 2. K any
    { name: M,      type: interfaceDesc3 }, # 3. M ~Map[K any, Pointer[V any]]
    { name: S,      type: interfaceDesc2 }, # 4. S ~List[T any]
    { name: T,      type: interfaceDesc1 }, # 5. T any
    { name: TKey,   type: interfaceDecl4 }, # 6. TKey comparable
    { name: TValue, type: interfaceDesc1 }, # 7. TValue any
    { name: V,      type: interfaceDesc1 }  # 8. V any
  ],
  locs: {
    '1': main.go
  }
}
