package $builtin {
  path: $builtin;

  interface List<any T> {
    // TODO: Should only be comparable not any since comparable should inherit any.
    implements: any, comparable;
    $len() int;
    $get(int index) T;
    $set(int index, T value);
  }
  inst List<string>
  inst List<Pointer<int>>

  interface Map<comparable TKey, any TValue> {
    implements: any, comparable;
    $len() int;
    $get(TKey key)(TValue value, bool found);
    $set(TKey key, TValue value);
  }
  inst Map<string, Pointer<int>>

  interface Pointer<any T> {
    implements: any, comparable;
    $deref() T;
  }
  inst Pointer<int>

  interface comparable {
    $equal(any other) bool;
  }
}

package main {
  path: command-line-arguments;

  class Bacon {
    Set<string, int, Map<string, Pointer<int>>> Set;
  }

  class Set<comparable K, any V, ~Map<K, Pointer<V>> M> {
    M m;
    AsSlices()(List<K>, List<Pointer<V>>);
  }
  // TODO: The following instance is missing
  inst Set<string, int, Map<string, Pointer<int>>>

  PrintSlice<any T, ~List<T> S>(S s)
  inst PrintSlice<string, List<string>>(List<string> s)
  inst PrintSlice<Pointer<int>, List<Pointer<int>>>(List<Pointer<int>> s);
  main();
}
