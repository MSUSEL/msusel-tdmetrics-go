{
  language: go,
  basics: [
    bool,  # 1. bool
    int,   # 2. int
    string # 3. string
  ],
  classes: [
    { # 4. main.Bacon { Set Set[ ??? ] }{} @ main.go:36
      name: Bacon, package: 52, data: 72, interface: 11, loc: 36
    },
    { # 5. main.Set[K any, V any, M ~Map[K,Pointer[V]]] { m M }{
      #      AsSlices() struct { $value1 List[K]; $value2 List[Pointer[V]] }
      #    }
      name: Set, package: 52, data: 73, interface: 13, loc: 9,
      typeParams: [ 33, 42, 35 ],
      methods: [ 19 ]
    }
  ],
  interDefs: [
    { # 6. $builtin.List[T any] {
      #      $cap() int;
      #      $get(index int) T;
      #      $len() int;
      #      $set(index int, value T)
      #    }
      name: List, package: 51, type: 14
    },
    { # 7. $builtin.Map[TKey any, TValue any]{
      #       $get(key TKey) struct { value TValue; ok bool }
      #       $len() int
      #       $set(key TKey, value TValue)
      #     }
      name: Map, package: 51, type: 16
    },
    { # 8. $builtin.Pointer[T any]{ $deref() T }
      name: Pointer, package: 51, type: 15
    },
    { # 9. $builtin.any any
      name: any, package: 51, type: 11
    },
    { # 10. $builtin.comparable[T any] { $compare(other T) int }
      name: comparable, package: 51, type: 12
    }
  ],
  interfaces: [
    {}, # 11. any
    {   # 12. interface { $compare(other any) int }
      inherits: [ 11 ],
      methods: [ 23 ]
    },
    { # 13. interface[K<comparable>, V<any>, M<~Map[K<any>,Pointer[V<any>]]>]{
      #       AsSlices() struct { $value1 List[K<any>]; $value2 List[Pointer[V<any>]] }
      #     }
      inherits: [ 12 ],
      typeParams: [ 33, 42, 35 ],
      methods: [ 32 ]
    },
    { # 14. interface[T any] {
      #       $cap() int
      #       $get[T any](index int) T
      #       $len() int
      #       $set[T any](index int, value T)
      #     } 
      inherits: [ 11 ],
      typeParams: [ 38 ],
      methods: [ 22, 25, 27, 28 ]
    },
    { # 15. interface[T any] { $deref[T any]() T }
      inherits: [ 11 ],
      typeParams: [ 38 ],
      methods: [ 24 ]
    },
    { # 16. interface[TKey any, TValue any]{
      #       $get(key TKey) struct { value TValue; ok bool }
      #       $len() int
      #       $set(key TKey, value TValue)
      #     }
      inherits: [ 11 ],
      typeParams: [ 40, 41 ],
      methods: [ 26, 27, 29 ]
    },
    { # 17. interface { ~List[ T<any> ] }
      inherits: [ 11 ],
      approx: [ 65 ]
    },
    { # 18. interface { ~Map[ K<any>, Pointer[ V<any> ] ] }
      inherits: [ 11 ],
      approx: [ 68 ]
    }
  ],
  methods: [
    { # 19. func main.Set.AsSlices() struct { $value1 List[K]; $value2 List[Pointer[V]] } @ main.go:13
      name: AsSlices, package: 52, receiver: 5, signature: 55, loc: 13,
      metrics: { codeCount: 11, complexity: 2, indents: 12, lineCount: 11 }
    },
    { # 20. func main.PrintSlice[T any, S ~List[T]](s S) @ main.go:25
      name: PrintSlice, package: 52, signature: 60, loc: 25,
      metrics: { codeCount: 10, complexity: 3, indents: 13, lineCount: 10 }
    },
    { # 21. func main.main() @ main.go:40
      name: main, package: 52, signature: 53, loc: 40,
      metrics: { codeCount: 16, complexity: 1, indents: 26, lineCount: 16 }
    }
  ],
  named: [
    { name: $cap,     type: 54 }, # 22. func $cap() int
    { name: $compare, type: 56 }, # 23. func $compare(other any) int
    { name: $deref,   type: 57 }, # 24. func $deref[T any]() T
    { name: $get,     type: 58 }, # 25. func $get[T any](index int) T
    { name: $get,     type: 61 }, # 26. func $get[TKey any, TValue any](key TKey<any>) struct { value TValue<any>; ok bool }
    { name: $len,     type: 54 }, # 27. func $len() int
    { name: $set,     type: 59 }, # 28. func $set[T any](index int, value T)
    { name: $set,     type: 62 }, # 29. func $set[TKey any, TValue any](key TKey<any>, value TValue<any>)
    { name: $value1,  type: 64 }, # 30. $value1 List[K<any>]
    { name: $value2,  type: 66 }, # 31. $value2 List[Pointer[V<any>]]
    { name: AsSlices, type: 55 }, # 32. func AsSlices() struct { $value1 List[K<any>]; $value2 List[Pointer[V<any>]] }
    { name: K,        type: 10 }, # 33. K $builtin.comparable
    { name: K,        type: 11 }, # 34. K any
    { name: M,        type: 18 }, # 35. M ~Map[K<any>,Pointer[V<any>]]
    { name: S,        type: 17 }, # 36. S ~List[T<any>]
    { name: Set,      type: 63 }, # 37. Set Set[string, int, Map[string, Pointer[int]]]
    { name: T,        type:  9 }, # 38. T $builtin.any
    { name: T,        type: 11 }, # 39. T any
    { name: TKey,     type:  9 }, # 40. TKey $builtin.any
    { name: TValue,   type:  9 }, # 41. TValue $builtin.any
    { name: V,        type: 11 }, # 42. V any
    { name: index,    type:  2 }, # 43. index int
    { name: key,      type: 40 }, # 44. key TKey<any>
    { name: m,        type: 35 }, # 45. m M<~Map[K<any>,Pointer[V<any>]]>
    { name: ok,       type:  1 }, # 46. ok bool
    { name: other,    type:  9 }, # 47. other any
    { name: s,        type: 36 }, # 48. s S<~List[T<any>]>
    { name: value,    type: 38 }, # 49. value T<any>
    { name: value,    type: 41 }  # 50. value TValue<any>
  ],
  packages: [
    { # 51. $builtin package
      name: $builtin,
      path: $builtin,
      interDefs: [ 6, 7, 8, 9, 10 ]
    },
    { # 52. main package
      name: main,
      path: command-line-arguments,
      classes: [ 4, 5 ],
      methods: [ 19, 20, 21 ]
    }
  ],
  signatures: [
    {}, # 53. func()()
    {   # 54. func() int
      return: 2
    },
    { # 55. func() struct { $value1 List[K<any>]; $value2 List[Pointer[V<any>]] }
      return: 71
    },
    { # 56. func(other any) int
      params: [ 47 ],
      return: 2
    },
    { # 57. func[T any]() T
      typeParams: [ 38 ],
      return: 38
    },
    { # 58. func[T any](index int) T
      typeParams: [ 38 ],
      params: [ 43 ],
      return: 38
    },
    { # 59. func[T any](index int, value T)
      typeParams: [ 38 ],
      params: [ 43, 49 ]
    },
    { # 60. func[T any, S ~List[T]](s S)
      typeParams: [ 39, 36 ],
      params: [ 48 ]
    },
    { # 61. func[TKey any, TValue any](key TKey) struct { value TValue; ok bool }
      typeParams: [ 40, 41 ],
      params: [ 44 ],
      return: 74
    },
    { # 62. func[TKey any, TValue any](key TKey, value TValue)
      typeParams: [ 40, 41 ],
      params: [ 44, 50 ]
    }
  ],
  solids: [
    { target: 5, typeParams: [ 3, 2, 67 ] }, # 63. Set[string, int, Map[string, Pointer[int]]]
    { target: 6, typeParams: [ 34 ] },       # 64. List[K<any>]              <<====================== TODO: Why not 33: List[K<comparable>]?
    { target: 6, typeParams: [ 39 ] },       # 65. List[T<any>]
    { target: 6, typeParams: [ 70 ] },       # 66. List[Pointer[V<any>]]
    { target: 7, typeParams: [ 3, 69 ] },    # 67. Map[string, Pointer[int]]
    { target: 7, typeParams: [ 34, 70 ] },   # 68. Map[K<any>, Pointer[V<any>]]
    { target: 8, typeParams: [ 2 ] },        # 69. Pointer[int]
    { target: 8, typeParams: [ 42 ] }        # 70. Pointer[V<any>]
  ],
  structs: [
    { fields: [ 30, 31 ] }, # 71. struct { $value1 List[K<any>]; $value2 List[Pointer[V<any>]] }
    { fields: [ 37 ] },     # 72. struct { Set Set[ ??? ] }
    { fields: [ 45 ] },     # 73. struct { m M<~Map[K<any>,Pointer[V<any>]]> }
    { fields: [ 50, 46 ] }  # 74. struct { value TValue<any>; ok bool }
  ],
  locs: {
    '1': main.go
  }
}
