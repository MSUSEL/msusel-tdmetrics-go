{
  language: go,
  abstracts: [
    { name: $deref, signature: 2, exported: true }, # 1. func $deref() Cat
    { name: $deref, signature: 3, exported: true }, # 2. func $deref() T <any>
    { name: Pet,    signature: 1, exported: true }  # 3. func Pet()
  ],
  arguments: [
    { type: object1 },   # 1. <unnamed> Cat
    { type: typeParam1 } # 2. <unnamed> T <any>
  ],
  basics: [
    string # 1. string
  ],
  fields: [
    { name: Name, type: basic1, exported: true } # 1. Name string
  ],
  interfaceDecls: [
    { # 1. $builtin.Pointer[T any] interface { $deref() T }
      name: Pointer, package: 1, interface: 3, exported: true,
      instances: [ 1 ], typeParams: [ 1 ]
    },
    { # 2. main.Animal interface { Pet() } @ main.go:5
      name: Animal, package: 2, interface: 4, loc: 5, exported: true,
    }
  ],
  interfaceDescs: [
    {},                                                      # 1. any
    { abstracts: [ 1, 3 ], inherits: [ 1 ], hint: pointer }, # 2. interface { $deref() Cat; Pat() }
    { abstracts: [ 2 ],    inherits: [ 1 ], hint: pointer }, # 3. interface { $deref() T <any> }
    { abstracts: [ 3 ],    inherits: [ 1 ] }                 # 4. interface { Pat() }
  ],
  interfaceInsts: [
    { # 1. Pointer[Cat] interface { $deref() Cat; Pat() }
      generic: 1, resolved: 2,
      instanceTypes: [ object1 ]
    }
  ],
  methods: [
    { # 1. Cat.Pet() @ main.go:13
      name: Pet, package: 2, receiver: 1, signature: 1,
      metrics: 1, loc: 13, exported: true, ptrRecv: true,
    },
    { # 2. main() @ main.go:17
      name: main, package: 2, signature: 1,
      metrics: 2, loc: 17,
    }
  ],
  metrics: [
    { # 1. Cat.Pet()
      codeCount: 3, complexity: 1, indents: 1, lineCount: 3, loc: 13,
      sideEffect: true, # b/c println
      reads: [ object1, selection1 ]
    },
    { # 2. main()
      codeCount: 6, complexity: 1, indents: 5, lineCount: 6, loc: 17,
      invokes: [ selection2 ],
      reads:   [ object1 ],
      writes:  [ object1, selection1 ]
    }
  ],
  objects: [
    { # 1. Cat struct { Name string }{ Pet() }
      name: Cat, package: 2, data: 1, interface: 1, loc: 9, exported: true,
      methods: [ 1 ]
    }
  ],
  packages: [
    { # 1. $builtin package
      name: $builtin, path: $builtin,
      interfaces: [ 1 ]
    },
    { # 2. main package
      name: main, path: command-line-arguments,
      interfaces: [ 2 ],
      methods:    [ 1, 2 ],
      objects:    [ 1 ]
    }
  ],
  selections: [
    { name: Name, origin: object1 }, # 1. Cat.Name
    { name: Pet,  origin: object1 }  # 2. Cat.Pet()
  ],
  signatures: [
    {},                 # 1. func()()
    { results: [ 1 ] }, # 2. func() Cat
    { results: [ 2 ] }  # 3. func() T <any>
  ],
  structDescs: [
    { fields: [ 1 ] } # 1. struct { Name string}
  ],
  typeParams: [
    { name: T, type: interfaceDesc1 } # 1. T any
  ],
  locs: {
    '1': main.go
  }
}
