{
  language: go,
  abstracts: [
    { name: $deref, signature: 2, vis: exported }, # 1. $deref() Node[T <any>]
    { name: $deref, signature: 3, vis: exported }, # 2. $deref() Node[int]
    { name: $deref, signature: 4, vis: exported }, # 3. $deref() T <any>
  ],
  arguments: [
    {              type: basic1         }, # 1. <unnamed> int
    {              type: object1        }, # 2. <unnamed> Node[T <any>]
    {              type: objectInst1    }, # 3. <unnamed> Node[int]
    {              type: typeParam1     }, # 4. <unnamed> T <any>
    { name: start, type: interfaceInst1 }, # 5. start Pointer[Node[T <any>]]
    { name: start, type: interfaceInst2 }, # 6. start Pointer[Node[int]]
    { name: stop,  type: interfaceInst1 }, # 7. stop Pointer[Node[T <any>]]
    { name: stop,  type: interfaceInst2 }, # 8. stop Pointer[Node[int]]
  ],
  basics: [ int ],
  fields: [
    { name: next,  type: interfaceInst2 }, # 1. next Pointer[Node[int]]
    { name: next,  type: interfaceInst1 }, # 2. next Pointer[Node[T <any>]]
    { name: value, type: basic1         }, # 3. value int
    { name: value, type: typeParam1     }, # 4. value T <any>
  ],
  interfaceDecls: [
    { # 1. Pointer[T <any>]{ $deref() T }
      name: Pointer, interface: 4, package: 1, vis: exported,
      typeParams: [ 1 ], instances: [ 1, 2 ],
    },
  ],
  interfaceDescs: [
    {},                                                   # 1. any
    { abstracts: [ 1 ], inherits: [ 1 ], hint: pointer }, # 2. interface{ $deref() Node[T <any>] }
    { abstracts: [ 2 ], inherits: [ 1 ], hint: pointer }, # 3. interface{ $deref() Node[int] }
    { abstracts: [ 3 ], inherits: [ 1 ], hint: pointer }, # 4. interface{ $deref() T <any> }
  ],
  interfaceInsts: [
    { # 1. Pointer[Node[T <any>]]{ $deref() Node[T] }
      generic: 1, resolved: 2, instanceTypes: [ object1 ],
    },
    { # 2. Pointer[Node[int]]{ $deref() Node[int] }
      generic: 1, resolved: 3, instanceTypes: [ objectInst1 ],
    }
  ],
  methodInsts: [
    { # 1. func Len[int](start Pointer[Node[int]], stop Pointer[Node[int]]) int
      generic: 1, metrics: 1, resolved: 6,
      instanceTypes: [ basic1 ],
    }
  ],
  methods: [
    { # 1. func Len[T <any>](start Pointer[Node[T]], stop Pointer[Node[T]]) int
      name: Len, signature: 5,
      loc: 5, metrics: 1, package: 2, vis: exported,
      instances: [ 1 ], typeParams: [ 1 ],
    },
    { # 2. func main()()
      name: main, signature: 1,
      loc: 18, metrics: 2, package: 2,
    },
  ],
  metrics: [
    { # 1. Len[T <any>]
      loc: 5,
      codeCount: 7, complexity: 2, indents: 6, lineCount: 7,
      reads: [
        interfaceInst1, # Pointer[Node[T <any>]]
        selection1,     # Pointer[Node[T <any>]].next
      ],
      writes: [
        interfaceInst1, # Pointer[Node[T <any>]]
      ],
    },
    { # 2. main metrics
      loc: 18,
      codeCount: 4, complexity: 1, indents: 2, lineCount: 4,
      sideEffect: true,
      invokes: [
        methodInst1, # Len[int]
      ],
      reads: [
        interfaceInst2, # Pointer[Node[int]]
        objectInst1,    # Node[T <any>]
      ],
      writes: [
        interfaceInst2, # Pointer[Node[int]]
        objectInst1,    # Node[int]
        selection2,     # Node[int].next
        selection3,     # Node[int].value
      ],
    },
  ],
  objectInsts: [
    { # 1. Node[int]{ next Pointer[Node[int]]; value int }
      generic: 1, resData: 1, resInterface: 1,
      instanceTypes: [ basic1 ],
    }
  ],
  objects: [
    { # 1. Node[T <any>]{ next Pointer[Node[T]]; value T }
      name: Node, data: 2, interface: 1,
      package: 2, loc: 13, vis: exported,
      typeParams: [ 1 ], instances: [ 1 ],
    }
  ],
  packages: [
    { # 1. $builtin package
      name: $builtin, path: $builtin,
      interfaces: [ 1 ],
    },
    { # 2. main package
      name: main, path: command-line-arguments,
      objects: [ 1 ], methods: [ 1, 2 ],
    }
  ],
  selections: [
    { name: next,  origin: interfaceInst1 }, # 1. Pointer[Node[T <any>]].next
    { name: next,  origin: objectInst1    }, # 2. Node[int].next
    { name: value, origin: objectInst1    }, # 3. Node[int].value
  ],
  signatures: [
    {},                                   # 1. func()()
    {                   results: [ 2 ] }, # 2. func() Node[T <any>]
    {                   results: [ 3 ] }, # 3. func() Node[int]
    {                   results: [ 4 ] }, # 4. func() T <any>
    { params: [ 5, 7 ], results: [ 1 ] }, # 5. func(start Pointer[Node[T <any>]], stop Pointer[Node[T]]) int
    { params: [ 6, 8 ], results: [ 1 ] }, # 6. func(start Pointer[Node[int]], stop Pointer[Node[int]]) int
  ],
  structDescs: [
    { fields: [ 1, 3 ] }, # 1. struct{ next Pointer[Node[int]]; value int }
    { fields: [ 2, 4 ] }, # 2. struct{ next Pointer[Node[T <any>]]; value T }
  ],
  typeParams: [
    { name: T, type: interfaceDesc1 } # 1. T any
  ],
  locs: {
    "1": main.go
  },
}