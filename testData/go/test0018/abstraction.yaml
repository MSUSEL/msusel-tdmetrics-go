{
  language: go,
  arguments: [
    { name: x, type: basic2      }, # 1. x string
    { name: x, type: typeParam1  }, # 2. x T
    { name: y, type: basic1      }, # 3. y int
    { name: z, type: objectInst1 }, # 4. z nested[int]
    { name: z, type: typeParam1  }, # 5. z T
  ],
  basics: [ int, string ],
  fields: [
    { name: X, type: typeParam1, vis: exported }, # 1. X T
    { name: Y, type: basic1,     vis: exported }, # 2. Y int
    { name: Y, type: typeParam2, vis: exported }, # 3. Y U
  ],
  interfaceDescs: [
    {}, # 1. any
  ],
  methodInsts: [
    { # 1. func main.dat[T int](x int, y int)
      generic: 1, resolved: 2,
      instanceTypes: [ basic2 ],
    },
    { # 2. func main.foo[nested[int]](z nested[int])
      generic: 2, resolved: 4,
      instanceTypes: [ objectInst1 ],
    },
  ],
  methods: [
    { # 1. func main.dat[T any](x T, y int)
      name: dat, package: 2, signature: 3,
      loc: 5, metrics: 1,
      typeParams: [ 1 ],
      instances: [ 1 ],
    },
    { # 2. func main.foo[T any](z T)
      name: foo, package: 2, signature: 5,
      loc: 13, metrics: 2,
      typeParams: [ 1 ],
      instances: [ 2 ],
    },
    { # 3. func main.main()
      name: main, package: 2, signature: 1,
      loc: 17, metrics: 3,
    },
  ],
  metrics: [
    { # 1. metrics for dat
      loc: 5, codeCount: 7, complexity: 1, indents: 7, lineCount: 7,
      invokes: [ methodInst2 ],
    },
    { # 2. metrics for foo
      loc: 13, codeCount: 3, complexity: 1, indents: 1, lineCount: 3,
      sideEffect: true,
    },
    { # 3. metrics for main
      loc: 17, codeCount: 3, complexity: 1, indents: 1, lineCount: 3,
      invokes: [ methodInst1 ],
    }
  ],
  objectInsts: [
    { # 1. type main.nested[int] struct{ X T; Y int }
      generic: 1, resData: 1, resInterface: 1,
      implicitTypes: [ typeParam1 ],
      instanceTypes: [ basic1 ],
    },
    # TODO: Need T to be resolved.
  ],
  objects: [
    { # 1. type main.nested[U any] struct{ X T; Y U }
      name: nested, package: 2, data: 2, interface: 1, loc: 6, nest: 1,
      instances: [ 1 ],
      typeParams: [ 2 ],
    }
  ],
  packages: [
    { # 1. $builtin package
      name: $builtin, path: $builtin,
    },
    { # 2. main package
      name: main, path: command-line-arguments,
      methods: [ 1, 2, 3 ],
      objects: [ 1 ],
    }
  ],
  signatures: [
    {},                   # 1. func()
    { params: [ 1, 3 ] }, # 2. func(x string, y int)
    { params: [ 2, 3 ] }, # 3. func(x T, y int)
    { params: [ 4 ]    }, # 4. func(z nested[int])
    { params: [ 5 ]    }, # 5. func(z T)
  ],
  structDescs: [
    { fields: [ 1, 2 ] }, # 1. struct{ X T; Y int }
    { fields: [ 1, 3 ] }, # 2. struct{ X T; Y U }
    # TODO: Need T to be resolved.
  ],
  typeParams: [
    { name: T, type: interfaceDesc1 }, # 1. T any
    { name: U, type: interfaceDesc1 }, # 2. U any
  ],
  locs: {
    "1": main.go,
  },
}
