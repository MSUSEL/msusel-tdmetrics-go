{
  language: go,
  arguments: [
    {          type: interfaceDesc1 }, # 1. <unnamed> any
    { name: x, type: basic2         }, # 2. x string
    { name: x, type: typeParam1     }, # 3. x T
    { name: y, type: basic1         }  # 4. y int
  ],
  basics: [ int, string ],
  interfaceDescs: [
    {} # 1. any
  ],
  methodInsts: [
    { # 1. dat[string](x string, y int) any
      generic: 1, resolved: 2,
      instanceTypes: [ basic2 ]
    }
  ],
  methods: [
    { # 1. dat[T any](x T, y int) any
      name: dat, package: 2, signature: 3, loc: 5, metrics: 1,
      instances: [ 1 ], typeParams: [ 1 ]
    },
    { # 2. main()
      name: main, package: 2, signature: 1, loc: 13, metrics: 2
    }
  ],
  metrics: [
    { # 1. ???
      loc: 5, codeCount: 7, complexity: 1, indents: 7, lineCount: 7
    },
    { # 2. ???
      loc: 13, codeCount: 4, complexity: 1, indents: 2, lineCount: 4,
      sideEffect: true, invokes: [ methodInst1 ]
    }
  ],
  packages: [
    { # 1. $builtin package
      name: $builtin, path: $builtin
    },
    { # 2. main package
      name: main, path: command-line-arguments,
      methods: [ 1, 2 ]
    }
  ],
  signatures: [
    {},                                   # 1. func()
    { params: [ 2, 4 ], results: [ 1 ] }, # 2. func(x string, y int) any
    { params: [ 3, 4 ], results: [ 1 ] }  # 3. func(x T, y int) any
  ],
  typeParams: [
    { name: T, type: interfaceDesc1 } # 1. T any
  ],
  locs: {
    "1": main.go
  }
}