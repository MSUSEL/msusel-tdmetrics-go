{
  language: go,
  basics: [
    int,   # 1. int
    string # 2. string
  ],
  classes: [
    { # 3. main.Y { int }{ ??? }
      name: Y, package: 13, data: 1, interface: 5, loc: 13,
      methods: [ 7 ]
    }
  ],
  interDefs: [
    { # 4. main.X interface { ~int; String() string }
      name: X, package: 13, type: 6, loc: 8
    }
  ],
  interfaces: [
    { # 5. interface { String() string }
      methods: [ 10 ]
    },
    { # 6. interface { ~int; String() string }
      inherits: [ 5 ],
      methods: [ 10 ],
      approx: [ 1 ]
    }
  ],
  methods: [
    { # 7. func (Y) String() string @ main.go:15
      name: String, package: 13, receiver: 3, signature: 15, loc: 15,
      metrics: { codeCount: 3, complexity: 1, indents: 1, lineCount: 3 }
    },
    { # 8. func Z[T interface { ~int; String() string }](x T) @ main.go:19
      name: Z, package: 13, signature: 16, loc: 19,
      metrics: { codeCount: 3, complexity: 1, indents: 1, lineCount: 3 }
    },
    { # 9. func main.main() @ main.go:23
      name: main, package: 13, signature: 14, loc: 23,
      metrics: { codeCount: 4, complexity: 1, indents: 2, lineCount: 4 }
    }
  ],
  named: [
    { name: String, type: 15 }, # 10. func String() string
    { name: T,      type:  6 }, # 11. T interface { ~int; String() string }
    { name: x,      type: 11 }  # 12. x T
  ],
  packages: [
    { # 13. main package
      name: main,
      path: command-line-arguments,
      classes: [ 3 ],
      interDefs: [ 4 ],
      methods: [ 7, 8, 9 ]
    }
  ],
  signatures: [
    {}, # 14. func()()
    {   # 15. func() string
      return: 2
    },
    { # 16. func[T interface { ~int; String() string }](x T)
      typeParams: [ 11 ],
      params: [ 12 ]
    }
  ],
  locs: {
    '1': main.go
  }
}
