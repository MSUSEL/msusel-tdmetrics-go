{
  abstracts: [
    { name: $get,      signature:  9 }, #  1. $get(index int) int
    { name: $get,      signature: 10 }, #  2. $get(index int) T
    { name: $len,      signature:  2 }, #  3. $len() int
    { name: $set,      signature: 11 }, #  4. $set(index int, value int)
    { name: $set,      signature: 12 }, #  5. $set(index int, value T)
    { name: bar,       signature: 13 }, #  6. bar( ??? ) ??? # TODO: finish filling out
    { name: baz,       signature:  1 }, #  7. baz( ??? ) ???
    { name: cat,       signature: 14 }, #  8. cat( ??? ) ???
    { name: clone,     signature:  5 }, #  9. clone( ??? ) ???
    { name: equals,    signature:  8 }, # 10. equals( ??? ) ???
    { name: finalize,  signature:  1 }, # 11. finalize( ??? ) ???
    { name: getClass,  signature:  3 }, # 12. getClass( ??? ) ???
    { name: hashCode,  signature:  2 }, # 13. hashCode( ??? ) ???
    { name: notify,    signature:  1 }, # 14. notify( ??? ) ???
    { name: notifyAll, signature:  1 }, # 15. notifyAll( ??? ) ???
    { name: toString,  signature:  3 }, # 16. toString( ??? ) ???
    { name: wait,      signature:  1 }, # 17. wait( ??? ) ???
    { name: wait,      signature:  6 }, # 18. wait( ??? ) ???
    { name: wait,      signature:  7 }  # 19. wait( ??? ) ???
  ],
  arguments: [
    {              type: basic1         }, #  1. <unnamed> int
    {              type: basic2         }, #  2. <unnamed> ???
    {              type: interfaceDesc5 }, #  3. <unnamed> ???
    {              type: object1        }, #  4. <unnamed> ???
    {              type: object2        }, #  4. <unnamed> ???
    {              type: typeParam1     }, #  5. <unnamed> T
    { name: arg0,  type: basic3         }, #  6. arg0 ???
    { name: arg0,  type: object2        }, #  7. arg0 ???
    { name: arg1,  type: basic2         }, #  8. arg1 ???
    { name: index, type: basic2         }, #  9. index int
    { name: t,     type: interfaceInst1 }, # 10. t $Array<T>
    { name: value, type: basic2         }, # 11. value int
    { name: value, type: typeParam1     }, # 12. value T
    { name: x,     type: basic2         }, # 13. x int
    { name: y,     type: basic2         }  # 14. y int
  ],
  basics: [ boolean, int, long ],
  interfaceDecls: [
    { # 1. $Array<T>
      name: $Array, interface: 2,
      typeParams: [ 1 ]
    },
  ],
  interfaceDescs: [
    { abstracts: [ 1, 3, 4 ] }, # 1. interface { $get(index int) int, $len() int, $set(index int, value int) }
    { abstracts: [ 2, 3, 5 ] }, # 2. interface { $get(index int) T,   $len() int, $set(index int, value T) }
    { # 3. ???
      abstracts: [ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 ],
      pin: object1
    },
    { # 4. ???
      abstracts: [ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 ],
      pin: object2
    },
    { abstracts: [ ] } # 5. Object
  ],
  interfaceInsts: [
    { generic: 1, instanceTypes: [ basic2 ], resolved: 1 } # 1. $Array<int>
  ],
  language: java,
  locs: { 1: unknown },
  methods: [
    { name: Foo,       package: 2, receiver: 1, signature:  4, vis: public         }, #  1. Foo ???
    { name: Object,    package: 1, receiver: 2, signature:  5, vis: public         }, #  2. Object ???
    { name: bar,       package: 2, receiver: 1, signature: 13, loc:  4, metrics: 1 }, #  3. bar(x int, y int) int
    { name: baz,       package: 2, receiver: 1, signature:  1, loc:  8, metrics: 2 }, #  4. baz()
    { name: cat,       package: 2, receiver: 1, signature: 14, loc: 12, metrics: 3 }, #  5. cat(t ...$Array<T>)
    { name: clone,     package: 1, receiver: 2, signature:  5, vis: protected      }, #  6. clone ???
    { name: equals,    package: 1, receiver: 2, signature:  8, vis: public         }, #  7. equals ???
    { name: finalize,  package: 1, receiver: 2, signature:  1, vis: protected      }, #  8. finalize ???
    { name: getClass,  package: 1, receiver: 2, signature:  3, vis: public         }, #  9. getClass ???
    { name: hashCode,  package: 1, receiver: 2, signature:  2, vis: public         }, # 10. hashCode ???
    { name: notify,    package: 1, receiver: 2, signature:  1, vis: public         }, # 11. notify ???
    { name: notifyAll, package: 1, receiver: 2, signature:  1, vis: public         }, # 12. notifyAll ???
    { name: toString,  package: 1, receiver: 2, signature:  3, vis: public         }, # 13. toString ???
    { name: wait,      package: 1, receiver: 2, signature:  1, vis: public         }, # 14. wait ???
    { name: wait,      package: 1, receiver: 2, signature:  6, vis: public         }, # 15. wait ???
    { name: wait,      package: 1, receiver: 2, signature:  7, vis: public         }  # 16. wait ???
  ],
  metrics: [
    { loc:  4, codeCount: 3, complexity: 1, indents: 3, lineCount: 3 }, # 1. metrics for bar
    { loc:  8, codeCount: 3, complexity: 1, indents: 3, lineCount: 3 }, # 2. metrics for baz
    { loc: 12, codeCount: 3, complexity: 1, indents: 3, lineCount: 3 }  # 3. metrics for cat
  ],
  objects: [
    { # 1. Foo struct{}
      name: Foo, package: 2, data: 1, interface: 3,
      vis: public, loc: 3,
      methods: [ 1, 3, 4, 5 ]
    },
    { # 2. Object
      name: Object, package: 1, data: 1, interface: 4,
      vis: public,
      methods: [ 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ]
    }
  ],
  packages: [
    { # 1. build-in package
      name: java.lang,
      methods: [ 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ],
      objects: [ 2 ]
    },
    { # 2. main package
      name: testData.java.test1002,
      methods: [ 1, 3, 4, 5 ],
      objects: [ 1 ]
    }
  ],
  signatures: [
    {                                    }, #  1. func()
    {                     results: [ 2 ] }, #  2. func() int
    {                     results: [ 3 ] }, #  3. func( ??? ) ???
    {                     results: [ 4 ] }, #  4. func( ??? ) ???
    {                     results: [ 5 ] }, #  5. func( ??? ) ???
    { params: [ 7 ]                      }, #  6. func( ??? ) ???
    { params: [ 7, 9 ]                   }, #  7. func( ??? ) ???  
    { params: [ 8 ],      results: [ 1 ] }, #  8. func(index int) int
    { params: [ 10 ],     results: [ 2 ] }, #  9. func(index int) T
    { params: [ 10 ],     results: [ 6 ] }, # 10. func( ??? ) ???
    { params: [ 10, 12 ]                 }, # 11. func(index int, value int)
    { params: [ 10, 13 ]                 }, # 12. func(index int, value T)
    { params: [ 14, 15 ], results: [ 2 ] }, # 13. func(x int, y int) int
    { params: [ 11 ], variadic: true     }  # 14. func(t ...$Array<T>)
  ],
  structDescs: [
    { } # 1. struct{}
  ],
  typeParams: [
    { name: T, type: interfaceDesc5 } # 1. T object
  ]
}
